import{q as s,p as a,s as n}from"./runtime-core.esm-bundler-9a3744ec.js";const t='{"title":"Characters","frontmatter":{},"headers":[{"level":2,"title":"add-length","slug":"add-length"},{"level":2,"title":"add-zeros","slug":"add-zeros"},{"level":2,"title":"add-character","slug":"add-character"},{"level":2,"title":"safe-characters","slug":"safe-characters"},{"level":2,"title":"character-set","slug":"character-set"},{"level":2,"title":"allowed-characters","slug":"allowed-characters"},{"level":2,"title":"nth-character","slug":"nth-character"},{"level":2,"title":"first-character","slug":"first-character"},{"level":2,"title":"last-character","slug":"last-character"},{"level":2,"title":"remove-character","slug":"remove-character"},{"level":2,"title":"remove-first-character","slug":"remove-first-character"},{"level":2,"title":"remove-last-character","slug":"remove-last-character"},{"level":2,"title":"if-else","slug":"if-else"},{"level":3,"title":"example","slug":"example"},{"level":2,"title":"fs-join","slug":"fs-join"},{"level":3,"title":"example","slug":"example-2"},{"level":2,"title":"is-number","slug":"is-number"},{"level":2,"title":"is-time","slug":"is-time"},{"level":2,"title":"is-duration","slug":"is-duration"},{"level":2,"title":"is-frequency","slug":"is-frequency"},{"level":2,"title":"is-integer","slug":"is-integer"},{"level":2,"title":"is-relative-length","slug":"is-relative-length"},{"level":2,"title":"is-absolute-path","slug":"is-absolute-path"},{"level":2,"title":"is-percentage","slug":"is-percentage"},{"level":2,"title":"is-length","slug":"is-length"},{"level":2,"title":"is-resolution","slug":"is-resolution"},{"level":2,"title":"is-position","slug":"is-position"},{"level":2,"title":"map-collect","slug":"map-collect"},{"level":2,"title":"map-set","slug":"map-set"},{"level":2,"title":"to-map","slug":"to-map"},{"level":2,"title":"rem","slug":"rem"},{"level":2,"title":"rem-calc","slug":"rem-calc"},{"level":2,"title":"str-split","slug":"str-split"},{"level":2,"title":"str-splice (alias for str-split)","slug":"str-splice-alias-for-str-split"},{"level":2,"title":"str-replace","slug":"str-replace"},{"level":2,"title":"str-replace-func","slug":"str-replace-func"},{"level":2,"title":"to-str","slug":"to-str"},{"level":2,"title":"str-contains","slug":"str-contains"},{"level":2,"title":"dasherize","slug":"dasherize"},{"level":2,"title":"underscore","slug":"underscore"},{"level":2,"title":"letter-uppercase","slug":"letter-uppercase"},{"level":2,"title":"letter-lowercase","slug":"letter-lowercase"},{"level":2,"title":"PascalCase","slug":"pascalcase"},{"level":2,"title":"camelCase","slug":"camelcase"},{"level":2,"title":"trim","slug":"trim"},{"level":2,"title":"strip-unit","slug":"strip-unit"},{"level":2,"title":"to-rem","slug":"to-rem"}],"lastUpdated":1588601888099.8245}';var e={};const p=n('<div class="vitepress-content"><h1 id="characters"><a class="header-anchor" href="#characters">#</a> Characters</h1><h2 id="add-length"><a class="header-anchor" href="#add-length">#</a> add-length</h2><p>Get a string and add extra spaces to make the string longer. Usefull in debugging and making all strings the same length.</p><table><thead><tr><th>Argument</th><th>Description</th></tr></thead><tbody><tr><td>string</td><td>The input string</td></tr><tr><td>length</td><td>New total string length</td></tr></tbody></table><p>example:</p>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token keyword">@debug</span> <span class="token string">&quot;| #{add-length(&quot;</span> <span class="token string">&quot;,20)} |&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">@debug</span> <span class="token string">&quot;| #{add-length(&#39;Guyn&#39;,20)} |&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">@debug</span> <span class="token string">&quot;| #{add-length(&#39;The Sass Toolbelt&#39;s&#39;,20)} |&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">/*\n|                     |\n| Guyn                |\n| The Sass Toolbelt   |\n|                     |\n*/</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="add-zeros"><a class="header-anchor" href="#add-zeros">#</a> add-zeros</h2><p>Add extra zeros to a number. When you want to create classes with 01, 003 or something equivalent</p><table><thead><tr><th>Argument</th><th>Description</th></tr></thead><tbody><tr><td>number</td><td>The input number</td></tr><tr><td>total</td><td>Total characters the new number will get. It will automatically add the zeros.</td></tr></tbody></table><p>example:</p>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token function">add-zeros</span><span class="token punctuation">(</span>1<span class="token punctuation">,</span>3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 001</span>\n\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="add-character"><a class="header-anchor" href="#add-character">#</a> add-character</h2><p>Create a string with given character times a given amount of times</p><table><thead><tr><th>Argument</th><th>Description</th></tr></thead><tbody><tr><td>string</td><td>The input string</td></tr><tr><td>length</td><td>Amount time the string will be repeated</td></tr></tbody></table><p>example:</p>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token keyword">@debug</span> <span class="token string">&#39;| #{add-character(&#39;</span>-<span class="token string">&#39;,20)} |&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">@debug</span> <span class="token string">&#39;| #{add-length(&#39;</span><span class="token string">&#39;,20)} |&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">@debug</span> <span class="token string">&#39;| #{add-length(&#39;</span>Guyn<span class="token string">&#39;,20)} |&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">@debug</span> <span class="token string">&#39;| #{add-length(&#39;</span>The Sass Toolbelt\\<span class="token string">&#39;s,20)} |&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">@debug</span> <span class="token string">&#39;| #{add-character(&#39;</span>-<span class="token string">&#39;,20)} |&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">/*\n| -------------------- |\n|                      |\n| Guyn               |\n| The Sass Toolbelt    |\n|                      |\n| -------------------- |\n*/</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="safe-characters"><a class="header-anchor" href="#safe-characters">#</a> safe-characters</h2><p>Convert special characters in strings to their simple equivalent to filter with characters.</p><table><thead><tr><th>Argument</th><th>Description</th></tr></thead><tbody><tr><td>string</td><td>The input string</td></tr></tbody></table><p>example:</p>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$string</span></span><span class="token punctuation">:</span> <span class="token function">safe-characters</span><span class="token punctuation">(</span><span class="token string">&quot;The quïck brown föx jumps over thé lazy døg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// &#39;The quick brown fox jumps over the lazy dog&#39;</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="character-set"><a class="header-anchor" href="#character-set">#</a> character-set</h2><p>Function which returns a list of characters of a certain type</p><table><thead><tr><th>Argument</th><th>Description</th></tr></thead><tbody><tr><td>characters</td><td>Type of characters you want to get back.</td></tr></tbody></table><table><thead><tr><th>Option</th><th>Value</th></tr></thead><tbody><tr><td>a-z</td><td>abcdefghijklmnopqrstuvwxyz</td></tr><tr><td>A-Z</td><td>ABCDEFGHIJKLMNOPQRSTUVWXYZ</td></tr><tr><td>a-Z</td><td>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</td></tr><tr><td>0-9</td><td>01234556789</td></tr></tbody></table><h2 id="allowed-characters"><a class="header-anchor" href="#allowed-characters">#</a> allowed-characters</h2><p>Filters out all characters which arent allowed.</p>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$string</span></span><span class="token punctuation">:</span> <span class="token function">allowed-characters</span><span class="token punctuation">(</span>\n\t<span class="token string">&quot;The quïck brown föx jumps over thé lazy døg&quot;</span><span class="token punctuation">,</span>\n\t<span class="token function">character-set</span><span class="token punctuation">(</span><span class="token string">&quot;a-z&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// hequckbrownfxjumpsoverthlazydg</span>\n\n<span class="token comment">// Filters out spaces and special characters, because those are not in a-z list.</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="nth-character"><a class="header-anchor" href="#nth-character">#</a> nth-character</h2><p>Get the character on a certain index of the string.</p><table><thead><tr><th>Argument</th><th>Description</th></tr></thead><tbody><tr><td>str</td><td>Input string</td></tr><tr><td>nth</td><td>Index to be found</td></tr></tbody></table>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$string</span></span><span class="token punctuation">:</span> <span class="token function">nth-character</span><span class="token punctuation">(</span><span class="token string">&quot;Helvetica&quot;</span><span class="token punctuation">,</span> 3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// l</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="first-character"><a class="header-anchor" href="#first-character">#</a> first-character</h2><p>Get the first character of a string.</p><table><thead><tr><th>Argument</th><th>Description</th></tr></thead><tbody><tr><td>str</td><td>Input string</td></tr></tbody></table>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$string</span></span><span class="token punctuation">:</span> <span class="token function">first-character</span><span class="token punctuation">(</span><span class="token string">&quot;Helvetica&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// H</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="last-character"><a class="header-anchor" href="#last-character">#</a> last-character</h2><p>Get the last character of a string.</p><table><thead><tr><th>Argument</th><th>Description</th></tr></thead><tbody><tr><td>str</td><td>Input string</td></tr></tbody></table>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$string</span></span><span class="token punctuation">:</span> <span class="token function">last-character</span><span class="token punctuation">(</span><span class="token string">&quot;Helvetica&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// a</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="remove-character"><a class="header-anchor" href="#remove-character">#</a> remove-character</h2><p>Remove a certain character by index from a string.</p><table><thead><tr><th>Argument</th><th>Description</th></tr></thead><tbody><tr><td>str</td><td>Input string</td></tr><tr><td>index</td><td>Index to be removed</td></tr></tbody></table>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$string</span></span><span class="token punctuation">:</span> <span class="token function">remove-character</span><span class="token punctuation">(</span><span class="token string">&quot;Helvetica&quot;</span><span class="token punctuation">,</span> 3<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Hevetica</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="remove-first-character"><a class="header-anchor" href="#remove-first-character">#</a> remove-first-character</h2><p>Remove the first character from a string.</p><table><thead><tr><th>Argument</th><th>Description</th></tr></thead><tbody><tr><td>str</td><td>Input string</td></tr></tbody></table>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$string</span></span><span class="token punctuation">:</span> <span class="token function">remove-first-character</span><span class="token punctuation">(</span><span class="token string">&quot;Helvetica&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// elvetica</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="remove-last-character"><a class="header-anchor" href="#remove-last-character">#</a> remove-last-character</h2><p>Remove the first character from a string.</p><table><thead><tr><th>Argument</th><th>Description</th></tr></thead><tbody><tr><td>str</td><td>Input string</td></tr></tbody></table>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$string</span></span><span class="token punctuation">:</span> <span class="token function">remove-last-character</span><span class="token punctuation">(</span><span class="token string">&quot;Helvetica&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Helvetic</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="if-else"><a class="header-anchor" href="#if-else">#</a> if-else</h2><p>Remove the first character from a string.</p><table><thead><tr><th>Argument</th><th>Description</th></tr></thead><tbody><tr><td>if</td><td>Input string</td></tr><tr><td>else</td><td>Input string</td></tr></tbody></table><h3 id="example"><a class="header-anchor" href="#example">#</a> example</h3>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$value1</span></span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token property"><span class="token variable">$value2</span></span><span class="token punctuation">:</span> <span class="token string">&#39;test2&#39;</span>\n\n\n<span class="token property"><span class="token variable">$string</span></span><span class="token punctuation">:</span> <span class="token function">if-else</span><span class="token punctuation">(</span><span class="token variable">$value1</span><span class="token punctuation">,</span><span class="token variable">$value2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// output: &#39;test2&#39;</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$value1</span></span><span class="token punctuation">:</span> <span class="token string">&#39;test1&#39;</span><span class="token punctuation">;</span>\n<span class="token property"><span class="token variable">$value2</span></span><span class="token punctuation">:</span> <span class="token string">&#39;test2&#39;</span>\n\n\n<span class="token property"><span class="token variable">$string</span></span><span class="token punctuation">:</span> <span class="token function">if-else</span><span class="token punctuation">(</span><span class="token variable">$value1</span><span class="token punctuation">,</span><span class="token variable">$value2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// output: &#39;test1&#39;</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$value1</span></span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token property"><span class="token variable">$value2</span></span><span class="token punctuation">:</span> <span class="token string">&#39;test2&#39;</span>\n\n\n<span class="token property"><span class="token variable">$string</span></span><span class="token punctuation">:</span> <span class="token function">if-else</span><span class="token punctuation">(</span><span class="token variable">$value1</span><span class="token punctuation">,</span><span class="token variable">$value2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// output: true</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="fs-join"><a class="header-anchor" href="#fs-join">#</a> fs-join</h2><p>Join multiple strings into a correct Path</p><table><thead><tr><th>Argument</th><th>Description</th></tr></thead><tbody><tr><td>strings</td><td>Input multiple strings</td></tr></tbody></table><h3 id="example-2"><a class="header-anchor" href="#example-2">#</a> example</h3>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$path</span></span><span class="token punctuation">:</span> <span class="token function">fs-join</span><span class="token punctuation">(</span><span class="token string">&quot;first/part&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;of/thepath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// output: &#39;first/part/of/thepath&#39;</span>\n\n<span class="token property"><span class="token variable">$path</span></span><span class="token punctuation">:</span> <span class="token function">fs-join</span><span class="token punctuation">(</span><span class="token string">&quot;first/part&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/of/thepath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// output: &#39;first/part/of/thepath&#39;</span>\n\n<span class="token property"><span class="token variable">$path</span></span><span class="token punctuation">:</span> <span class="token function">fs-join</span><span class="token punctuation">(</span><span class="token string">&quot;first/part/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;of/thepath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// output: &#39;first/part/of/thepath&#39;</span>\n\n<span class="token property"><span class="token variable">$path</span></span><span class="token punctuation">:</span> <span class="token function">fs-join</span><span class="token punctuation">(</span><span class="token string">&quot;/first/part&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;of/thepath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// output: &#39;/first/part/of/thepath&#39;</span>\n\n<span class="token property"><span class="token variable">$path</span></span><span class="token punctuation">:</span> <span class="token function">fs-join</span><span class="token punctuation">(</span><span class="token string">&quot;/first/part/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/of/thepath&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// output: &#39;/first/part/of/thepath&#39;</span>\n\n<span class="token property"><span class="token variable">$path</span></span><span class="token punctuation">:</span> <span class="token function">fs-join</span><span class="token punctuation">(</span><span class="token string">&quot;/first/part&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;of/thepath&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;and/some&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;more&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// output: &#39;/first/part/of/thepath/and/some/more&#39;</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h1 id="is"><a class="header-anchor" href="#is">#</a> is</h1><h2 id="is-number"><a class="header-anchor" href="#is-number">#</a> is-number</h2><ul><li>todo</li></ul><h2 id="is-time"><a class="header-anchor" href="#is-time">#</a> is-time</h2><ul><li>todo</li></ul><h2 id="is-duration"><a class="header-anchor" href="#is-duration">#</a> is-duration</h2><ul><li>todo</li></ul><h2 id="is-frequency"><a class="header-anchor" href="#is-frequency">#</a> is-frequency</h2><ul><li>todo</li></ul><h2 id="is-integer"><a class="header-anchor" href="#is-integer">#</a> is-integer</h2><ul><li>todo</li></ul><h2 id="is-relative-length"><a class="header-anchor" href="#is-relative-length">#</a> is-relative-length</h2><ul><li>todo</li></ul><h2 id="is-absolute-path"><a class="header-anchor" href="#is-absolute-path">#</a> is-absolute-path</h2><ul><li>todo</li></ul><h2 id="is-percentage"><a class="header-anchor" href="#is-percentage">#</a> is-percentage</h2><ul><li>todo</li></ul><h2 id="is-length"><a class="header-anchor" href="#is-length">#</a> is-length</h2><ul><li>todo</li></ul><h2 id="is-resolution"><a class="header-anchor" href="#is-resolution">#</a> is-resolution</h2><ul><li>todo</li></ul><h2 id="is-position"><a class="header-anchor" href="#is-position">#</a> is-position</h2><ul><li>todo</li></ul><h1 id="maps"><a class="header-anchor" href="#maps">#</a> Maps</h1><h2 id="map-collect"><a class="header-anchor" href="#map-collect">#</a> map-collect</h2><p>Combines maps</p>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$fruits</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>\n\t<span class="token property">orange</span><span class="token punctuation">:</span> <span class="token string">&quot;Orange&quot;</span><span class="token punctuation">,</span>\n\t<span class="token property">green</span><span class="token punctuation">:</span> <span class="token string">&quot;Cucumber&quot;</span><span class="token punctuation">,</span>\n\t<span class="token property">yellow</span><span class="token punctuation">:</span> <span class="token string">&quot;Lemon&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token property"><span class="token variable">$morefruits</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>\n\t<span class="token property">brown</span><span class="token punctuation">:</span> <span class="token string">&quot;Kiwi&quot;</span><span class="token punctuation">,</span>\n\t<span class="token property">purple</span><span class="token punctuation">:</span> <span class="token string">&quot;Grape&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token property"><span class="token variable">$allfruits</span></span><span class="token punctuation">:</span> <span class="token function">map-collec</span><span class="token punctuation">(</span><span class="token variable">$fruits</span><span class="token punctuation">,</span> <span class="token variable">$morefruits</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ( orange: &#39;Orange&#39;, green: &#39;Cucumber&#39;, yellow: &#39;Lemon&#39;, brown: &#39;Kiwi&#39;, purple: &#39;Grape&#39;)</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="map-set"><a class="header-anchor" href="#map-set">#</a> map-set</h2><p>Adds a new value to a map</p>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$fruits</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span>\n\t<span class="token property">orange</span><span class="token punctuation">:</span> <span class="token string">&quot;Orange&quot;</span><span class="token punctuation">,</span>\n\t<span class="token property">green</span><span class="token punctuation">:</span> <span class="token string">&quot;Cucumber&quot;</span><span class="token punctuation">,</span>\n\t<span class="token property">yellow</span><span class="token punctuation">:</span> <span class="token string">&quot;Lemon&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token property"><span class="token variable">$newfruits</span></span><span class="token punctuation">:</span> <span class="token function">map-set</span><span class="token punctuation">(</span><span class="token variable">$fruits</span><span class="token punctuation">,</span> <span class="token string">&quot;brown&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kiwi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// ( orange: &#39;Orange&#39;, green: &#39;Cucumber&#39;, yellow: &#39;Lemon&#39;, brown: &#39;Kiwi&#39;)</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="to-map"><a class="header-anchor" href="#to-map">#</a> to-map</h2><p>Converts a list to a map</p><h1 id="size"><a class="header-anchor" href="#size">#</a> Size</h1><h2 id="rem"><a class="header-anchor" href="#rem">#</a> rem</h2><p>Give a value in pixels, and it will return a value in rem.</p>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$size</span></span><span class="token punctuation">:</span> <span class="token function">rem</span><span class="token punctuation">(</span>14<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 0.875rem</span>\n\n<span class="token property"><span class="token variable">$size</span></span><span class="token punctuation">:</span> <span class="token function">rem</span><span class="token punctuation">(</span>16 20 14<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 1rem 1.25rem 0.875rem</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="rem-calc"><a class="header-anchor" href="#rem-calc">#</a> rem-calc</h2><p>Calculates the pixels to rem value.</p><h1 id="strings"><a class="header-anchor" href="#strings">#</a> Strings</h1><h2 id="str-split"><a class="header-anchor" href="#str-split">#</a> str-split</h2><p>Split a string by a given string into a list.</p>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$string</span></span><span class="token punctuation">:</span> <span class="token string">&quot;Henri Matisse, was a French painter from Nice&quot;</span><span class="token punctuation">;</span>\n\n<span class="token property"><span class="token variable">$list</span></span><span class="token punctuation">:</span> <span class="token function">str-split</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">,</span> <span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// returns (&#39;Henri Matisse&#39;, &#39;was a French painter from Nice&#39;);</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="str-splice-alias-for-str-split"><a class="header-anchor" href="#str-splice-alias-for-str-split">#</a> str-splice (alias for str-split)</h2><p>Split a string by a given string into a list.</p><h2 id="str-replace"><a class="header-anchor" href="#str-replace">#</a> str-replace</h2><p>Replace a certain string by another string in a string.</p>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$string</span></span><span class="token punctuation">:</span> <span class="token string">&quot;Henri Matisse, was a French painter from Nice&quot;</span><span class="token punctuation">;</span>\n<span class="token property"><span class="token variable">$list</span></span><span class="token punctuation">:</span> <span class="token function">str-replace</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">,</span> <span class="token string">&quot;Nice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Paris&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// &#39;Henri Matisse, was a French painter from Paris&#39;;</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$string</span></span><span class="token punctuation">:</span> <span class="token string">&quot;Henri Matisse, was a French painter from Nice&quot;</span><span class="token punctuation">;</span>\n<span class="token property"><span class="token variable">$needles</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">&quot;Henri&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Nice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token property"><span class="token variable">$replacers</span></span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">&quot;Henk&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Paris&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token property"><span class="token variable">$list</span></span><span class="token punctuation">:</span> <span class="token function">str-replace</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">,</span> <span class="token variable">$needles</span><span class="token punctuation">,</span> <span class="token variable">$replacers</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// &#39;Henk Matisse, was a French painter from Paris&#39;;</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="str-replace-func"><a class="header-anchor" href="#str-replace-func">#</a> str-replace-func</h2><p>The actual replacing function used in str-replace, only accepts strings.</p>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$string</span></span><span class="token punctuation">:</span> <span class="token string">&quot;Henri Matisse, was a French painter from Nice&quot;</span><span class="token punctuation">;</span>\n<span class="token property"><span class="token variable">$list</span></span><span class="token punctuation">:</span> <span class="token function">str-replace</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">,</span> <span class="token string">&quot;Nice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Paris&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// &#39;Henri Matisse, was a French painter from Paris&#39;;</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="to-str"><a class="header-anchor" href="#to-str">#</a> to-str</h2><p>Convert a value to a string.</p><h2 id="str-contains"><a class="header-anchor" href="#str-contains">#</a> str-contains</h2><p>Check if the given string contains another string</p><h2 id="dasherize"><a class="header-anchor" href="#dasherize">#</a> dasherize</h2><p>Convert a string which can be used as slug</p><h2 id="underscore"><a class="header-anchor" href="#underscore">#</a> underscore</h2><p>Convert a string and remove special characters. Replace spaces with underscores.</p><h2 id="letter-uppercase"><a class="header-anchor" href="#letter-uppercase">#</a> letter-uppercase</h2><p>Uppercase one letter in a string, by default the first one.</p>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$var</span></span><span class="token punctuation">:</span> <span class="token function">letter-uppercase</span><span class="token punctuation">(</span><span class="token string">&quot;some string&quot;</span><span class="token punctuation">,</span> 2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// result: &#39;sOme string&#39;</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="letter-lowercase"><a class="header-anchor" href="#letter-lowercase">#</a> letter-lowercase</h2><p>Lowercase one letter in a string, by default the first one.</p>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$var</span></span><span class="token punctuation">:</span> <span class="token function">letter-lowercase</span><span class="token punctuation">(</span><span class="token string">&quot;SOME STRING&quot;</span><span class="token punctuation">,</span> 2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// result: &#39;SoME STRING&#39;</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="pascalcase"><a class="header-anchor" href="#pascalcase">#</a> PascalCase</h2><p>convert any string to PascalCase</p>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$var</span></span><span class="token punctuation">:</span> <span class="token function">PascalCase</span><span class="token punctuation">(</span><span class="token string">&quot;some string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// result: &#39;SomeString&#39;</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="camelcase"><a class="header-anchor" href="#camelcase">#</a> camelCase</h2><p>convert any string to camelCase</p>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$var</span></span><span class="token punctuation">:</span> <span class="token function">camelCase</span><span class="token punctuation">(</span><span class="token string">&quot;some string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// result: &#39;someString&#39;</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<h2 id="trim"><a class="header-anchor" href="#trim">#</a> trim</h2><p>Trim spaces</p>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$var</span></span><span class="token punctuation">:</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token string">&quot;  some string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// result: &#39;some string&#39;</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>Removes spaces in the beginning of a string.</p><h1 id="unit"><a class="header-anchor" href="#unit">#</a> Unit</h1><h2 id="strip-unit"><a class="header-anchor" href="#strip-unit">#</a> strip-unit</h2>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property"><span class="token variable">$var</span></span><span class="token punctuation">:</span> <span class="token function">strip-unit</span><span class="token punctuation">(</span>2px<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// result: 2</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>Strips the unit from a number</p><h2 id="to-rem"><a class="header-anchor" href="#to-rem">#</a> to-rem</h2>\x3c!--beforebegin--\x3e<div class="language-scss extra-class">\x3c!--afterbegin--\x3e<pre class="language-scss"><code><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">to-rem</span><span class="token punctuation">(</span>2px<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre>\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>Converts pixels to rem. When its already rem, it will return the same value, when its pixels it will convert the pixels to a rem value.</p></div>');e.render=function(n,t){return a(),s("div",null,[p])};export default e;export{t as __pageData};
